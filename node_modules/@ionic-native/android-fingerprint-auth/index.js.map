{"version":3,"sources":["../../../src/@ionic-native/plugins/android-fingerprint-auth/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAiGxE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AASH;IAA4C,0CAAiB;IAA7D;;IA0DA,CAAC;IAnCC;;;;OAIG;IAEH,wCAAO,GAAP,UAAQ,OAAuB,IAAiC,MAAM,CAAC,CAAC,CAAC;IAEzE;;;;OAIG;IAEH,wCAAO,GAAP,UAAQ,OAAuB,IAAgC,MAAM,CAAC,CAAC,CAAC;IAExE;;;OAGG;IAEH,4CAAW,GAAX,cAAkH,MAAM,CAAC,CAAC,CAAC;IAE3H;;;OAGG;IAEH,uCAAM,GAAN,UAAO,OAAgD,IAAmC,MAAM,CAAC,CAAC,CAAC;IAC9F,iCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,qCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IA5BA;QADC,OAAO,EAAE;;;;yDAC+D;IAQzE;QADC,OAAO,EAAE;;;;yDAC8D;IAOxE;QADC,OAAO,EAAE;;;;6DACiH;IAO3H;QADC,OAAO,EAAE;;;;wDACyF;IAnDxF,sBAAsB;QARlC,MAAM,CAAC;YACN,UAAU,EAAE,wBAAwB;YACpC,MAAM,EAAE,yCAAyC;YACjD,SAAS,EAAE,iBAAiB;YAC5B,IAAI,EAAE,uEAAuE;YAC7E,SAAS,EAAE,CAAC,SAAS,CAAC;SACvB,CAAC;OAEW,sBAAsB,CA0DlC;IAAD,6BAAC;CA1DD,AA0DC,CA1D2C,iBAAiB,GA0D5D;SA1DY,sBAAsB","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\n\r\n\r\nexport interface AFAAuthOptions {\r\n\r\n  /**\r\n   * Required\r\n   * Used as the alias for your key in the Android Key Store.\r\n   */\r\n  clientId: string;\r\n\r\n  /**\r\n   * Used to create credential string for encrypted token and as alias to retrieve the cipher.\r\n   */\r\n  username?: string;\r\n\r\n  /**\r\n   * Used to create credential string for encrypted token\r\n   */\r\n  password?: string;\r\n\r\n  /**\r\n   * Required for decrypt()\r\n   * Encrypted user credentials to decrypt upon successful authentication.\r\n   */\r\n  token?: string;\r\n\r\n  /**\r\n   * Set to true to remove the \"USE BACKUP\" button\r\n   */\r\n  disableBackup?: boolean;\r\n\r\n  /**\r\n   * Change the language. (en_US or es)\r\n   */\r\n  locale?: string;\r\n\r\n  /**\r\n   * The device max is 5 attempts. Set this parameter if you want to allow fewer than 5 attempts.\r\n   */\r\n  maxAttempts?: number;\r\n\r\n  /**\r\n   * Require the user to authenticate with a fingerprint to authorize every use of the key.\r\n   * New fingerprint enrollment will invalidate key and require backup authenticate to\r\n   * re-enable the fingerprint authentication dialog.\r\n   */\r\n  userAuthRequired?: boolean;\r\n\r\n  /**\r\n   * Set the title of the fingerprint authentication dialog.\r\n   */\r\n  dialogTitle?: string;\r\n\r\n  /**\r\n   * Set the message of the fingerprint authentication dialog.\r\n   */\r\n  dialogMessage?: string;\r\n\r\n  /**\r\n   * Set the hint displayed by the fingerprint icon on the fingerprint authentication dialog.\r\n   */\r\n  dialogHint?: string;\r\n\r\n}\r\n\r\nexport interface AFADecryptOptions {\r\n  /**\r\n   * Biometric authentication\r\n   */\r\n  withFingerprint: boolean;\r\n  /**\r\n   * Authentication using backup credential activity\r\n   */\r\n  withBackup: boolean;\r\n  /**\r\n   * FingerprintAuth.CipherMode.DECRYPT\r\n   * Decrypted password\r\n   */\r\n  password: string;\r\n}\r\n\r\nexport interface AFAEncryptResponse {\r\n  /**\r\n   * Biometric authentication\r\n   */\r\n  withFingerprint: boolean;\r\n  /**\r\n   * Authentication using backup credential activity\r\n   */\r\n  withBackup: boolean;\r\n  /**\r\n   * base64encoded string representation of user credentials\r\n   */\r\n  token: string;\r\n}\r\n\r\n/**\r\n * @name Android Fingerprint Auth\r\n * @description\r\n * This plugin will open a native dialog fragment prompting the user to authenticate using their fingerprint. If the device has a secure lockscreen (pattern, PIN, or password), the user may opt to authenticate using that method as a backup.\r\n * @usage\r\n * ```typescript\r\n * import { AndroidFingerprintAuth } from '@ionic-native/android-fingerprint-auth';\r\n *\r\n * constructor(private androidFingerprintAuth: AndroidFingerprintAuth) { }\r\n *\r\n * ...\r\n *\r\n *\r\n * this.androidFingerprintAuth.isAvailable()\r\n *   .then((result)=> {\r\n *     if(result.isAvailable){\r\n *       // it is available\r\n *\r\n *       this.androidFingerprintAuth.encrypt({ clientId: 'myAppName', username: 'myUsername', password: 'myPassword' })\r\n *         .then(result => {\r\n *            if (result.withFingerprint) {\r\n *                console.log('Successfully encrypted credentials.');\r\n *                console.log('Encrypted credentials: ' + result.token);\r\n *            } else if (result.withBackup) {\r\n *              console.log('Successfully authenticated with backup password!');\r\n *            } else console.log('Didn\\'t authenticate!');\r\n *         })\r\n *         .catch(error => {\r\n *            if (error === this.androidFingerprintAuth.ERRORS.FINGERPRINT_CANCELLED) {\r\n *              console.log('Fingerprint authentication cancelled');\r\n *            } else console.error(error)\r\n *         });\r\n *\r\n *     } else {\r\n *       // fingerprint auth isn't available\r\n *     }\r\n *   })\r\n *   .catch(error => console.error(error));\r\n * ```\r\n * @interfaces\r\n * AFAAuthOptions\r\n * AFAEncryptResponse\r\n * AFADecryptOptions\r\n */\r\n@Plugin({\r\n  pluginName: 'AndroidFingerprintAuth',\r\n  plugin: 'cordova-plugin-android-fingerprint-auth',\r\n  pluginRef: 'FingerprintAuth',\r\n  repo: 'https://github.com/mjwheatley/cordova-plugin-android-fingerprint-auth',\r\n  platforms: ['Android']\r\n})\r\n\r\nexport class AndroidFingerprintAuth extends IonicNativePlugin {\r\n\r\n  ERRORS: {\r\n    BAD_PADDING_EXCEPTION: 'BAD_PADDING_EXCEPTION',\r\n    CERTIFICATE_EXCEPTION: 'CERTIFICATE_EXCEPTION',\r\n    FINGERPRINT_CANCELLED: 'FINGERPRINT_CANCELLED',\r\n    FINGERPRINT_DATA_NOT_DELETED: 'FINGERPRINT_DATA_NOT_DELETED',\r\n    FINGERPRINT_ERROR: 'FINGERPRINT_ERROR',\r\n    FINGERPRINT_NOT_AVAILABLE: 'FINGERPRINT_NOT_AVAILABLE',\r\n    FINGERPRINT_PERMISSION_DENIED: 'FINGERPRINT_PERMISSION_DENIED',\r\n    FINGERPRINT_PERMISSION_DENIED_SHOW_REQUEST: 'FINGERPRINT_PERMISSION_DENIED_SHOW_REQUEST',\r\n    ILLEGAL_BLOCK_SIZE_EXCEPTION: 'ILLEGAL_BLOCK_SIZE_EXCEPTION',\r\n    INIT_CIPHER_FAILED: 'INIT_CIPHER_FAILED',\r\n    INVALID_ALGORITHM_PARAMETER_EXCEPTION: 'INVALID_ALGORITHM_PARAMETER_EXCEPTION',\r\n    IO_EXCEPTION: 'IO_EXCEPTION',\r\n    JSON_EXCEPTION: 'JSON_EXCEPTION',\r\n    MINIMUM_SDK: 'MINIMUM_SDK',\r\n    MISSING_ACTION_PARAMETERS: 'MISSING_ACTION_PARAMETERS',\r\n    MISSING_PARAMETERS: 'MISSING_PARAMETERS',\r\n    NO_SUCH_ALGORITHM_EXCEPTION: 'NO_SUCH_ALGORITHM_EXCEPTION',\r\n    SECURITY_EXCEPTION: 'SECURITY_EXCEPTION'\r\n  };\r\n\r\n  /**\r\n   * Opens a native dialog fragment to use the device hardware fingerprint scanner to authenticate against fingerprints registered for the device.\r\n   * @param options {AFAAuthOptions} Options\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  encrypt(options: AFAAuthOptions): Promise<AFAEncryptResponse> { return; }\r\n\r\n  /**\r\n   * Opens a native dialog fragment to use the device hardware fingerprint scanner to authenticate against fingerprints registered for the device.\r\n   * @param options {AFAAuthOptions} Options\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  decrypt(options: AFAAuthOptions): Promise<AFADecryptOptions> { return; }\r\n\r\n  /**\r\n   * Check if service is available\r\n   * @returns {Promise<any>} Returns a Promise that resolves if fingerprint auth is available on the device\r\n   */\r\n  @Cordova()\r\n  isAvailable(): Promise<{ isAvailable: boolean, isHardwareDetected: boolean, hasEnrolledFingerprints: boolean }> { return; }\r\n\r\n  /**\r\n   * Delete the cipher used for encryption and decryption by username\r\n   * @returns {Promise<any>} Returns a Promise that resolves if the cipher was successfully deleted\r\n   */\r\n  @Cordova()\r\n  delete(options: { clientId: string; username: string; }): Promise<{ deleted: boolean }> { return; }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}